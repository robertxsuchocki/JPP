-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [Decl] ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Decl] [Stmt] "}" ;

VarDecl.   Decl ::= Type Item ";" ;

FunDecl.   Decl ::= Type Ident "(" [Arg] ")" Block ;

Arg.       Arg ::= Type Ident;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

NoInit.    Item ::= Ident ;

Init.      Item ::= Ident "=" Expr ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

ListAss.   Stmt ::= Ident "[" Expr "]" "=" Expr  ";" ;

DictAss.   Stmt ::= Ident "{{" Expr "}}" "=" Expr  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Break.     Stmt ::= "break" ";" ;

Continue.  Stmt ::= "continue" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" Ident "=" Expr ".." Expr "do" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

Print.     Stmt ::= "print" "(" Expr ")" ;

PrintLn.   Stmt ::= "println" "(" Expr ")" ;

DictDel.   Stmt ::= "del_key" "(" Ident "," Expr ")" ;

separator  Decl "" ;

separator  Arg "," ;

separator  Stmt "" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "str" ;

Bool.      Type ::= "bool" ;

Void.      Type ::= "void" ;

List.      Type ::= "[" Type "]" ;

Dict.      Type ::= "{{" Type "," Type "}}" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

Incr.      Expr7 ::= Ident "++" ;

Decr.      Expr7 ::= Ident "--" ;

EIntStr.   Expr7 ::= "toStr" "(" Expr6 ")" ;

EStrInt.   Expr7 ::= "toInt" "(" Expr6 ")" ;

ListLen.   Expr7 ::= "length" "(" Ident ")" ;

DictHas.   Expr7 ::= "has_key" "(" Ident "," Expr ")" ;

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EStr.      Expr6 ::= String ;

ENewList.  Expr6 ::= "[]" ;

EValList.  Expr6 ::= Ident "[" Expr "]" ;

ENewDict.  Expr6 ::= "{{}}" ;

EValDict.  Expr6 ::= Ident "{{" Expr "}}" ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 7 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
